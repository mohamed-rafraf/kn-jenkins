on: 
  push:
    branches:
      - 'dev'


#https://github.com/kubesphere-sigs/ks-devops-helm-chart/releases/download/ks-devops-0.3.2/ks-devops-0.3.2.tgz

jobs:
  jenkins-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Prepare ks-devops chart
        run: |
          wget https://github.com/kubesphere-sigs/ks-devops-helm-chart/releases/download/ks-devops-0.3.2/ks-devops-0.3.2.tgz
          tar xzf "ks-devops-0.3.2.tgz"
          yq eval 'del(.dependencies[] | select(.name == "jenkins").version)' -i ks-devops/Chart.yaml
          rm -rf ks-devops/charts/jenkins
          mv charts/kn-jenkins ks-devops/charts/jenkins
          sed -i 's/tag: master/tag: latest/g' ks-devops/values.yaml
          cat ks-devops/Chart.yaml
          echo "*************************************"
          tree ks-devops

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      - name: Create KinD Cluster
        run: |
          kind create cluster --config=.github/kind/cluster.yaml

      - name: Install Kubesphere CLI 
        run: |
          echo "Installing Kubesphere CLI ..."
          curl -L https://github.com/linuxsuren/http-downloader/releases/latest/download/hd-linux-amd64.tar.gz | tar xzv
          sudo mv hd /usr/bin/hd
          hd install kubesphere-sigs/ks
          echo "Kubesphere CLI is installed"

      - name: Installing Prerequisite CRDs
        run: |
          kubectl apply -f https://github.com/kubesphere/kubesphere/raw/v3.4.0/config/ks-core/crds/tenant.kubesphere.io_workspacetemplates.yaml
          # kubectl apply -f https://github.com/kubesphere/kubesphere/raw/v3.4.0/config/ks-core/crds/tenant.kubesphere.io_workspaces.yaml
          kubectl apply -f https://github.com/kubesphere/kubesphere/raw/v3.4.0/config/ks-core/crds/cluster.kubesphere.io_clusters.yaml

      - name: Install ArgoCD 
        run: |
          echo "Installing ArgoCD ..."
          wget https://github.com/kubesphere/ks-installer/raw/v3.4.0/roles/ks-devops/files/ks-devops/charts/argo-cd-4.4.0.tgz
          helm install ks-devops argo-cd-4.4.0.tgz -n argocd --create-namespace
          kubectl wait --for=condition=ready pod --all -n argocd --timeout=5m

      - name: Install DevOps 
        run: |
          helm install ks-devops ks-devops -n kubesphere-devops-system \
            --set serviceAccount.create=true \
            --create-namespace \
            --set image.pullPolicy=Always \
            --set jenkins.ksAuth.enabled=true
          bash scripts/check_status.sh
          kubectl get pods -n kubesphere-devops-system

      - name: Create and Test a Pipeline 
        run: |
          echo "Creating a simple Pipeline"
          ks pip create --ws simple --project test --template simple --name simple
          echo "Pipeline is Created"
          echo "**********************************************************************"
          NAMESPACE=$(kubectl get pipelines -A | tail -n 1 | awk '{ print $1}')
          kubectl get pipeline -n $NAMESPACE simple -o=jsonpath='{.spec.pipeline.jenkinsfile}'
          echo "**********************************************************************"
          echo simple | ks pip run --project test -p simple
          echo "Pipeline is Running Now !!"
          kubectl get pipelineruns.devops.kubesphere.io -n $NAMESPACE
          kubectl get pipelineruns.devops.kubesphere.io -A
          PIPELINERUN=$(kubectl get pipelineruns.devops.kubesphere.io -n $NAMESPACE | tail -n 1 | awk '{print $1}')
          kubectl wait -n $NAMESPACE --for=jsonpath='{.status.phase}'=Succeeded pipelineruns/$PIPELINERUN --timeout=2m \
            || (kubectl get pipelineruns.devops.kubesphere.io -n $NAMESPACE && echo "SAD AND BAD :("
          kubectl get pipelineruns.devops.kubesphere.io -n $NAMESPACE
          echo "WELL DONE"


      # - name: Deploy KubeSphere to Kind
      #   run: |
      #     wget https://raw.githubusercontent.com/kubesphere/ks-installer/master/scripts/check_cluster_status.sh
      #     wget https://raw.githubusercontent.com/kubesphere/ks-installer/master/deploy/kubesphere-installer.yaml
      #     wget https://raw.githubusercontent.com/kubesphere/ks-installer/master/deploy/cluster-configuration.yaml
      #     sed -i 's/imagePullPolicy: .*/imagePullPolicy: IfNotPresent/g' kubesphere-installer.yaml
      #     sed -i 's/jenkinsMemoryReq: .*/jenkinsMemoryReq: 200Mi/g' cluster-configuration.yaml
      #     kubectl apply -f kubesphere-installer.yaml
      #     kubectl apply -f cluster-configuration.yaml
      #     bash check_cluster_status.sh